name: 'Build Go binaries for all platforms'
description: 'Build Go binaries for all OS and architecture combinations'

# these inputs are always provided by flowzone, so they must always be defined on the composite action
inputs:
  json:
    description: "JSON stringified object containing all the inputs from the calling workflow"
    required: true
  secrets:
    description: "JSON stringified object containing all the secrets from the calling workflow"
    required: true

runs:
  using: "composite"
  steps:
    - name: Setup Go
      uses: actions/setup-go@v5.5.0
      with:
        go-version: '1.25'

    - name: Build binary for ${{ env.matrix_value }}
      shell: bash
      run: |
        set -e  # Exit on any error
        cd lib
        
        # Create output directory
        mkdir -p ../bin
        
        # Get the current platform from matrix
        platform=${{ env.matrix_value }}
        echo "Building for $platform..."
        
        export GOOS=$(echo $platform | cut -d'-' -f1)
        export GOARCH=$(echo $platform | cut -d'-' -f2)
        
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="balena-compose-go.exe"
        else
          BINARY_NAME="balena-compose-go"
        fi
        
        CGO_ENABLED=0 go build -ldflags="-s -w" -o ../bin/$BINARY_NAME .

        echo "Binary built successfully for $platform"
        
        # Create tar.gz archive with platform-specific name
        cd ../bin
        tar -czf balena-compose-go-$platform.tar.gz $BINARY_NAME
        
        echo "Archive created:"
        ls -la balena-compose-go-$platform.tar.gz

    - name: Upload binary as artifact
      uses: actions/upload-artifact@v4.6.2
      with:
        name: gh-release-${{ env.matrix_value }}
        path: bin/balena-compose-go-${{ env.matrix_value }}.tar.gz
        retention-days: 7